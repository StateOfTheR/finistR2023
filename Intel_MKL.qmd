---
title: "Intel MKL & Open Blas"
format: html
toc: true
author: 
  - Annaig De Walsche
  - Barbara Bricout
  - Tristan Mary-Huard
  - Armand Favrot
  - Félix Cheysson
  - Théodore Vanrenterghem
date: 20/08/2023
---

Nous allons d'abord installer les librairies **Intel MKL** (processeur Intel nécéssaire) & **Open Blas**. Ces deux librairies d'algèbre linéaire permettent de d'optimiser et/ou de paralléliser un certains nombre d'opérations algébriques, notamment le calcul matriciel.

```{r}
#| message: false
library(ggplot2)
library(tidyverse)
library(furrr)
library(future)
library(tictoc)
```

```{r}
test_type <- function(seed, type = 'type'){
  res <- data.frame(seed = rep(0,2), 
                    time = rep(0,2), 
                    type = rep(0,2),
                    matrix_size = rep(0,2))
  matrix_size <- c(200, 2000)
  for(j in 1:2){
      set.seed(seed)
      mat = matrix(rnorm(matrix_size[[j]] ^ 2), ncol = matrix_size[[j]])
      T1 = Sys.time()
      res_tmp = mat %*% mat
      T2 = Sys.time()
      res$seed[[j]] <- seed
      res$time[[j]] <- difftime(T2, T1)
      res$type[[j]] <- type
      res$matrix_size[[j]] <- matrix_size[[j]]
  }
  return(res)
}

compare <- function(seeds,type = 'type'){
  if(type == "base"){
    plan(multisession, workers = availableCores())
    future_map_dfr(seeds,~test_type(.x,type = type))
  }else{
    map_dfr(seeds,~test_type(.x,type = type))
  }
}

my_multiplot <- function(data){
  ggplot(data = data,
       aes(x = time, y = type, fill = type,col = type)) +
  geom_boxplot(alpha = 0.5,show.legend = F) +  
  facet_wrap("matrix_size",scales = "free_x",labeller = label_both)
}
```


Nous les testons avec un produit matriciel de 10000 x 10000

```{r}
#| eval: false
size <- 10000
mat <- matrix(rnorm(size**2), size, size)
tic()
get_res <- mat %*% mat
toc()
```

Avant l'installation les librairies utilisées pour du calcul matriciel en R sont `libblas.so.3.10.0` et `liblapack.so.3.10.0` (on peut les voir avec la ligne)

```{r}
#| eval: false
sessionInfo()
```

### Installation sur Windows (seulement Intel MKL)

Le plus simple est de recycler les librairies de microsoft R Open (ex version de R distribuée par microsoft qui utilisait la librairie MKL par défaut) via [ce lien](https://www.microsoft.com/en-US/download/details.aspx?id=51205). Une fois microsoft R open installé, il suffit d'aller récupérer dans le répertoire :

`C:\Program Files\Microsoft\R Open\R-4.0.2\bin\x64`

les trois fichiers nommés

1.  `Rblas.dll`

2.  `Rlapack.dll`

3.  `libiomp5md.dll`

et de les copier dans le répertoire

`C:\Program Files\R\R-4.1.2\bin\x64`

Concrètement on remplace les deux fichiers faisant appel au librairies blas et lapack par des fichiers du même nom mais qui en pratique font implicitement appel à mkl. Pensez bien à sauver une copie des fichiers initiaux.

### Installation sur Ubuntu 22.04 (Intel MKL et Open Blas)

#### Intel MKL

`sudo apt install intel-mkl`

#### Open Blas

`sudo apt install libopenblas-base`

#### Changement de librairie

Pour changer la librairie Blas

`sudo update-alternatives --config libblas.so.3-x86_64-linux-gnu`

Pour changer la librairie Lapack

`sudo update-alternatives --config liblapack.so.3-x86_64-linux-gnu`

Dans les deux cas cela ouvre un menu montrant les différentes librairies disponibles.

### Comparaison produit matriciel (`BLAS`)

Une fois instalée vérifier si les librairies sont bien référencées pour le calcul matriciel avec

```{r}
#| eval: false
sessionInfo()
```

```{r}
#| eval: false
tic()
get_res <- mat %*% mat
toc()
```

| Système d'exploitation | Library                         | CPU                                 | Base R | Intel MKL                           |
|--------------|--------------|-------------------|--------------|--------------|
| **Windows 10**         | [Intel MKL]{style="color:red;"} | Intel Xeon - 16 processeur logiques | 15 min | [7 secondes]{style="color:red;"}    |
| Ubuntu 22.04           | Intel MKL                       | Intel i7 - 8 processeur logiques    | 5 min  | Moins de 1 min                      |
| **Ubuntu 22.04**       | [Open Blas]{style="color:red;"} | Intel i7 - 8 processeur logiques    | 5 min  | [9-14 secondes]{style="color:red;"} |

### Bench mark approfondie


```{r}
types <- c("base","openblas","intel_mkl","lasy_intel_mkl")
seeds <- 1:20
```

```{r}
type <- types[[4]]
res <- compare(seeds,type)

saveRDS(res, file = paste0('res_',type,'.RDS'))
```

```{r}
list_of_results <- grep("^res_.*.RDS$",dir(),value=T)
res_table <- map_dfr(list_of_results,readRDS)
```


```{r}
my_multiplot(res_table)
```

```{r}
res_table %>% 
  filter(type != "base") %>% 
  my_multiplot()
```


## seafile link
<https://seafile.agroparistech.fr/d/696def33ceb848508cb0/>
