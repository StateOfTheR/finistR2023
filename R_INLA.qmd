---
title: "R INLA"
format: html
toc: true
author: 
  - Pierre Barbillon
  - Isabelle Sanchez
  - Jérémy Lamouroux
  - Félix Cheysson
  - Théodore Vanrenterghem
date: 20/08/2023
---

## Introduction

Présentation de la methodologie INLA (integrated nested Laplace approximation) en utilisant les package {INLA} et sa surcouche {inlabru}.

L'approximation de Laplace intégrée et imbriquée (INLA) est une approche de l'inférence statistique pour les modèles de champs aléatoires gaussiens latents (GMRF) introduite par Rue et Martino (2006). Elle fournit une alternative rapide et déterministe au MCMC qui était l'outil standard pour l'inférence de tels modèles. Le principal avantage de l'approche INLA par rapport à la MCMC est qu'elle est beaucoup plus rapide à calculer.


{inlabru} est une surcouche du package INLA, qui facilite l'utilisation du package R {INLA} en simplifiant la syntaxe. Ce package intègre deux extensions : 
- Modèles de type GAM (pour intégrer des prédicteurs non linéaires)
- Processus de Cox log-Gaussien  pour modéliser des processus univariés et spatiaux basés sur des données de comptages.


Sources : 

-   <https://www.r-inla.org/home>

-   <https://inla.r-inla-download.org/r-inla.org/doc/inla-manual/inla-manual.pdf>

-   <https://sites.google.com/inlabru.org/inlabru/home>

-   <https://inlabru-org.github.io/inlabru/index.html>

## Installation de INLA

```{r}
#| eval: false
# Base de R INLA
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
# inlabru wrapper
install.packages("inlabru")
```


## Utilisation

### Exemple 1

#### Setup

```{r loading}
#| warning: false
#| message: false
# Chargement des packages
library(inlabru)
library(lme4) # pour comparer avec l'approche frequentiste 
library(ggplot2)
library(ggpolypath)
library(RColorBrewer)
```

Le dataset `awards` contient le nombre de réussites (`num_awards`) en math (`math`) pour une classe de 200 élèves. La réponse mesurée étant un comptage, nous devons spécifier un modèle généralisé avec fonction de lien Poisson. 

```{r data-set}
# Chargement des donnees
load("data/awards.RData")
head(awards)
```

La fonction `bru_options_set` permet de fixer des options sur des paramètres spécifiques à INLA.

```{r set-options}
bru_options_set(bru_verbose = TRUE,
                control.compute = list(dic = TRUE, waic = TRUE))
```

On peut récupérer ces paramètres avec :

```{r get-options}
#| eval: false
bru_options_get()
```

#### Application

```{r first-apply}
# Formulation du modele
cmp1 <- num_awards ~ math + 1
# Application de la formule avec un modèle de Poisson
fit.glm.bru <- bru(cmp1, family = "poisson", data = awards)
summary(fit.glm.bru)
```

#### Comparaison avec un GLM

```{r glm1}
cmp2 <- num_awards ~ math
fit2.glm <- glm(cmp2, family="poisson", data = awards)
summary(fit2.glm)
```

Les réponses sont proches. 

#### Intégration d'un effet aléatoire

Pour prendre en compte le problème classique de surdispersion dans les données de comptages, il peut être intéréssant de rajouter un effet aléatoire de la manière suivante.

```{r effet-aleatoire}
cmp3 <- num_awards ~ math + 1 + rand.eff(map = 1:200, model = "iid", n = 200)

fit3.glmm.bru <- bru(cmp3, family = "poisson", data = awards)
summary(fit3.glmm.bru)
```

#### Comparaison avec l'approche fréquentiste 

```{r freq2}
cmp4<- num_awards ~ math + (1|id)
fit4.glmm<-glmer(cmp4, family = poisson, data = awards)
summary(fit4.glmm)
```

On remarque que les résultats sont un peu moins comparables. Pour se rapprocher de `glmer()`, il suffit de modifier les options de modélisation de l'effet aléatoire. 

```{r effet-aleatoire-2}
cmp5 <- num_awards ~ math + 1 + rand.eff(map = 1:200, model = "iid", n = 200,
                                                 hyper=list(prec=list(param=c(10,0.1),
                                                                      prior="pc.prec")))
fit5.glmm.bru <- bru(cmp5, family = "poisson", data = awards )
summary(fit5.glmm.bru)
```

### Exemple 2


Dans le jeu de données gorillas on cherche à comprendre la répartition de communautés de gorilles dans une région donnée en fonction de facteurs (végétations) ou de variable continue (altitude).

```{r data-set-2}
data(gorillas, package = "inlabru")
```

On importe l'objet liste `gorillas` qui contient 4 sous-listes contenant les localisations d'habitats de gorilles (`nests`), le maillage de la zone d'intérêt (`mesh`), la frontière du domaine (`boundary`) et les variables explicatives (`gcov`).

```{r extract-value}
nests <- gorillas$nests
mesh <- gorillas$mesh
boundary <- gorillas$boundary
gcov <- gorillas$gcov

summary(gcov$vegetation)
```

La construction du maillage peut se faire avec les fonctions de {INLA}:

- `inla.mesh.2d()`,
- `inla.mesh.create()`, 
- `inla.mesh.1d()`, 
- `inla.mesh.basis()`,
- `inla.spde2.pcmatern()`.

voir la vignette suivante pour quelques exemples: https://inlabru-org.github.io/inlabru/articles/random_fields_2d.html.


```{r plot-without-mesh}
ggplot() +
  gg(gcov$vegetation) +
  gg(boundary) +
  gg(nests, color = "white", cex = 0.5) +
  coord_equal()
```

```{r plot-mesh}
ggplot() +
  gg(gcov$vegetation) +
  gg(mesh) +
  gg(boundary) +
  gg(nests, color = "white", cex = 0.5) +
  coord_equal()
```

Les graphiques ci-dessus permettent de visualiser les différentes types de végétaions ainsi que les localisations d'habitats de gorilles dans la zone d'étude. Il est également possible de rajouter le maillage construit sur la zone. {inlabru} propose la fonction `gg()` permettant avac la grammaire ggplot2 de rajouter les différentes couches d'informations.

```{r formules-3}
comp1 <- coordinates ~ vegetation(gcov$vegetation, model = "factor_full") - 1
comp1alt <- coordinates ~ vegetation(gcov$vegetation, model = "factor_contrast") + 1
```

Pour construire un modèle expliquant les comptages de gorilles avec leurs répartitions dans la zone d'étude et prenant en compte les types de végatations, nous définissons la formule avec:

- `coordinates()` la fonction de {sp} de récupération des coordonnées des habitats dans l'objet nests
- `vegetation` sera le mot utilisé dans les sorties du modèle faisant référence à la variable explicative `gcov$vegetation` (possible d'écrire le mot que l'on veut...)
- `model = "factor_full"` est pour indiquer que la variable explicative est un facteur. Il est possible d'utiliser "factor_full", "factor_contrast" etc... suivant les types de contraintes que l'on souhaite appliquer au modèle. "factor_full" indique estimations de toutes les modalités mais il faut alors supprimer l'intercept afin d'être dans un cas identifiable.

Après avoir défini la formule du modèle, on estime les paramètres en utilisant la fonction `lgcp()` qui permet de modéliser un processus log-normalisé de Cox. Cette fonction est une sour-couche de la fonction de base `bru()`.

Le LGCP est un modèle probabiliste de processus ponctuel observé dans un tissu spatial ou temporel. 


```{r}
fit1 <- lgcp(components = comp1, # formule du modèle
             data = nests,       # data set
             samplers = boundary,  # frontière de la zone d'étude
             domain = list(coordinates = mesh) # maillage de la zone
             )
```

`fit1` estime l'intensité des présences de gorilles dans la zone d'étude. Il est alors possible de représenter l'intensité moyenne de ces habitats:

```{r}
pred.df <- fm_pixels(mesh, mask = boundary, format = "sp")
int1 <- predict(fit1, pred.df, ~ exp(vegetation))

ggplot() +
  gg(int1) +
  gg(boundary, alpha = 0, lwd = 2) +
  gg(nests, color = "DarkGreen") +
  coord_equal()
```


## References

<https://www.pymc.io/projects/examples/en/latest/gaussian_processes/log-gaussian-cox-process.html>

Fabian E. Bachl, Finn Lindgren, David L. Borchers, and Janine B. Illian (2019), inlabru: an R package for Bayesian spatial modelling from ecological survey data, Methods in Ecology and Evolution, British
Ecological Society, 10, 760--766, doi:10.1111/2041-210X.13168

Funwi-Gabga, N. and Mateu, J. (2012) Understanding the nesting spatial behaviour of gorillas in the Kagwene Sanctuary, Cameroon. Stochastic Environmental Research and Risk Assessment 26 (6), 793-811.
